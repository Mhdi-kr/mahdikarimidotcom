<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Vue on Mahdi&#39;s Engineering</title>
    <link>http://localhost:3000/tags/vue/</link>
    <description>Recent content in Vue on Mahdi&#39;s Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <managingEditor>mhdi_kr@outlook.com (Mahdi Karimi)</managingEditor>
    <webMaster>mhdi_kr@outlook.com (Mahdi Karimi)</webMaster>
    <copyright>Mahdi Karimi</copyright>
    <lastBuildDate>Mon, 19 Sep 2022 01:47:16 +0330</lastBuildDate>
    <atom:link href="http://localhost:3000/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>maintaining my sanity in a world full of new shiny technologies</title>
      <link>http://localhost:3000/blog/maintaining-my-sanity-in-a-world-full-of-new-shiny-technologies/</link>
      <pubDate>Mon, 19 Sep 2022 01:47:16 +0330</pubDate><author>mhdi_kr@outlook.com (Mahdi Karimi)</author>
      <guid>http://localhost:3000/blog/maintaining-my-sanity-in-a-world-full-of-new-shiny-technologies/</guid>
      <description>managing to keep calm and to continue learning in a noisy world</description>
      <content:encoded><![CDATA[<p>Software development field is moving too fast. It‚Äôs so hard to keep up 100% with latest trends and new technologies. In my opinion it is one the cons of becoming a software engineer. You have to be willing to study lots of new technologies on a daily basis to be able to stay fresh and relevant.</p>
<p>Some of the technology trends are fad and short-lived. They are not going to be something that‚Äôs used by a lot of companies in the future but some of them are here to stay.</p>
<p>There‚Äôs a common term in JavaScript ecosystem called ‚ÄúJavaScript fatigue‚Äù describing newcomer‚Äôs Exhaustion of the current state of the endless number of JavaScript frameworks and libraries which seemingly do the same thing with different names.</p>
<p>In this article I intend to shine light on some of the ideas surrounding this issue we are facing and share my opinions on it.</p>
<p>Put emphasis on the timeless concepts
Try mastering protocols, Their history and the philosophy behind them. protocols are the underlying principles underneath all of the libraries and tools we are using on a daily basis.</p>
<p>For example, HTTP, TCP, gRPC or Web Sockets are always maintain their definition in terms of technical specs and functionality. What you expect from a HTTP 1.1 request is as solid as bedrock and has never changed since 1997.</p>
<p>HTTP 1.1 RFC, Try reading RFCs as a hobby for in your spare time, You‚Äôll thank me later :D
Emphasis on learning timeless concepts and building blocks frees you from paying too much attention to the libraries that implement them and even better, Mastering fundamentals lets you learn new tools and libraries very rapidly.</p>
<p>The best camera is the one you already own, stay focused
Cloudflare just announced using new reverse proxy instead of nginx and made a call for open sourcing it. what happens to nginx now? Nothing. Many organizations will keep using it because it is good enough for their needs and not all of us should keep up with the latest shiny thing or make new frameworks for ourselves.</p>
<p>There are many instances when people make new tech to solve their problems. It is important to pay attention to FOMO (fear of missing out). Just because someone is using something fresher doesn‚Äôt mean you should switch too.</p>
<p>You can always port your existing knowledge to new technology
Imagine using redis or memcached in your projects, you are already familiar with key-value pair in-memory databases. One day there‚Äôs a new modern replacement for them called dragonfly.</p>
<p>you already have a good understanding how that new thing works because you are proficient in the less modern tech. You can quickly pick that up if needed and port your legacy knowledge to the new tech so you don‚Äôt need to fear missing out.</p>
<p>Underrated skill of our generation, learning what to learn
Working in the software industry, you‚Äôll quickly notice you can‚Äôt learn everything. It is much about what you ignore than what you pay attention to. As said in the previous section, timeless concepts let you make better decisions in what to learn next and what areas need more of your limited attention.</p>
<p>You have to learn the ability to quickly understand what to ignore and what to pay attention to.</p>
<p>Many dots may come up but you don‚Äôt have to connect them!
Deprecated or old doesn‚Äôt always mean useless
There are many web applications built on top of jQuery, working really well serving their customers. Rewriting such applications is just too much work and my not deliver any new value to the business. If new tech doesn‚Äôt bring any new business value to your customers you may want to reconsider using it in the first place.</p>
<p>If you enjoy this much chaos, more power to you!
Ending this short article with the notion that, there are many people who deeply appreciate how fast things are moving and also are into the chaos surrounding the whole ecosystem. I‚Äôm not by no means against this preference and want to mention it is just not my cup of tea. If you like this much chaos, more power to you! stay open-minded but also intentional at the same time.</p>
]]></content:encoded>
    </item>
    <item>
      <title>philosophy of software design in vue.js applications</title>
      <link>http://localhost:3000/blog/philosophy-of-software-design-in-vue-js-applications/</link>
      <pubDate>Mon, 08 Aug 2022 01:47:16 +0330</pubDate><author>mhdi_kr@outlook.com (Mahdi Karimi)</author>
      <guid>http://localhost:3000/blog/philosophy-of-software-design-in-vue-js-applications/</guid>
      <description>Understanding complexity, its symptoms and causes related to Vue.js applications</description>
      <content:encoded><![CDATA[<p>Recently I finished reading a great book called ‚ÄúA Philosophy of Software Design‚Äù written by John Ousterhout. In this article, I am going to distill everything I‚Äôve learned throughout my journey and try to apply them to Vue.js ecosystem.</p>
<h3 id="complexity">Complexity</h3>
<p>In the first and second sections, the book teaches us to fight complexity in our systems, we must take two important actions:</p>
<p>Eliminate complexity by writing shorter and more obvious code
Encapsulate complexity in components (or modules) so that other developers working on the project are not exposed to it all at once
These points may seem obvious or trivial at first, but personally I&rsquo;ve seen engineers with all levels of expertise make the same mistakes over and over again (including myself!).</p>
<p>So to tackle this problem we should first learn the definition, symptoms and the possible causes of complexity.</p>
<h3 id="definition">Definition</h3>
<p>‚ÄúComplexity is anything related to the structure of a software system that makes it harder to understand or modify.‚Äù</p>
<h3 id="symptoms">Symptoms</h3>
<p>Complexity in software systems has 3 major symptoms:</p>
<h4 id="change-amplification">Change amplification</h4>
<p>‚ÄúChange amplification means a seemingly simple change requires code modifications in many different places.‚Äù</p>
<p>Meaning there are a lot of couplings in our system which breeds complexity.</p>
<h4 id="cognitive-load">Cognitive load</h4>
<p>‚ÄúCognitive load is measured by how much a developer needs to know in order to complete a task.‚Äù</p>
<h4 id="unknown-unknowns">Unknown unknowns</h4>
<p>‚Äúit‚Äôs not obvious which pieces of code must be modified to complete a task, or what information a developer must have to carry out the task successfully.‚Äù</p>
<p>Causes
Now, what can actually cause those symptoms in our software systems? two major factors are to consider:</p>
<p>Dependency
A dependency exists when a given piece of code cannot be understood and modified in isolation. The code relates in some way to other code, and the other code must be considered and/or modified if the given code is changed.</p>
<p>Obscurity
Obscurity occurs when important information is not obvious.</p>
<p>In JavaScript/TypeScript projects, non-existing JSDoc or using the ‚Äúany‚Äù type all over the place are two examples of obscurity.</p>
<p>Have you ever been in a situation when you were forced to read the low level implementation of a component just to know what props to pass to it or how something is handled inside? you‚Äôve just experienced obscurity.</p>
<p>Working Code is !enough
There are 10 types of developers in this world. The ones who can read binary and the ones who can‚Äôt. Just kidding üòÑ.</p>
<p>There are two types of developers, Tactical and strategic.</p>
<p>Tactical
Tactical programmers‚Äô focus is to get something working as fast as possible, such as a new feature or a bug fix. The product managers and executives love them but this is exactly how systems eventually become complicated.</p>
<p>Tactical developers‚Äô mindset is the main cultural factor that brings about ‚ÄúTechnical debt‚Äù in most cases.</p>
<p>Strategic
Strategic programmers realize that working code is not enough.</p>
<p>Most of the code in any system is written by extending the existing codebase, so your most important job as a developer is to facilitate those future extensions.</p>
<p>Strategic programmers do proactive or reactive investments. such as:</p>
<p>Find a simple design for each new component
Try a couple of alternative designs and pick the cleanest one
Try to imagine a few ways in which the system might need to be changed in the future and make sure that will be easy with your design
Write a good documentation
When you discover a design problem, don‚Äôt just ignore it or patch around it
We should strive to be a little more strategic and a little less tactical in our careers.</p>
<p>Module depth
Each module or component has two parts = an interface and an implementation.</p>
<p>The best modules are the ones whose interfaces are much simpler than their implementations.</p>
<p>This is exactly where ‚Äúbreaking code to smaller parts‚Äù can actually make our architecture worse, because the benefits provided by shallow modules are negated by the cost of learning and using their interfaces.</p>
<p>Interfaces should be designed to make usage of the common case as simple as possible (KISS).</p>
<p>Hiding information, or leaking it!
Each component should encapsulate a few pieces of knowledge, which represent design decisions. The knowledge is embedded in the component‚Äôs implementation but does not appear on its interface, so it is not visible to other modules.</p>
<p>Information leakage occurs when a design decision is reflected in multiple components. This creates a dependency between the components. Also, if a piece of information is reflected in the interface for a component, then by definition it has been leaked.</p>
<p>JSON interface does not tell us how it does parsing or stringifying. It hides that knowledge and just does it for us.</p>
<p>Different Layer, Different Abstraction
If a system consists of adjacent layers with similar abstractions, this suggests a problem with the class decomposition.</p>
<p>Pass-through variables
Imagine you have a long chain of methods and a variable is passing down through it. This variable creates complexity because it forces all the links in that chain to be aware of its existence, even if one of them doesn‚Äôt use it.</p>
<p>Even worse, let‚Äôs say you want to modify the implementation or type of that variable, You need to change all those methods which that variable is passed to (change amplification) or if a new variable comes into play you have to make sure the path that variable traverses is correct and expected.</p>
<p>An example of pass-through variables in Vue.js is props usage.</p>
<p>A quick example of prop drilling in a hypothetical to-do list application
In the example above, we are passing a dynamic URL that we need to post a payload to whenever we check something in our to-do list. Let‚Äôs suppose we only have access to that URL in the root index.vue file so we can‚Äôt just hardcode that in the TaskItem.vue file so we are forced to pass it down the component tree like that.</p>
<p>Now imagine if requirements change, in that case we need to change 3 places to accomplish one thing!</p>
<p>Pass-through functions
Methods that do little except invoke other methods, whose signatures are similar or identical, are shallower as they increase the interface complexity of the class, but they don‚Äôt increase the total functionality of the system. They indicate that there is confusion over the division of responsibility between classes/components.</p>
<p>Interface of a class should normally be different from its implementation = the representations used internally should be different from the abstractions that appear in the interface.</p>
<p>Better Together Or Better Apart
One of the most fundamental questions in software design = given two pieces of functionality, should they be implemented together in the same place, or should their implementations be separated?</p>
<p>Subdividing components can result in:</p>
<p>The more the number of components is, the harder it is to keep track of them all (more hassle because of more moving pieces)
Additional code to manage the components
Separation makes it harder to see the components at the same time, or even be aware of their existence (increasing unknown unknowns).
Code duplication
A few indications that two pieces of code are related are:</p>
<p>They share information
They are used together (only compelling if bidirectional)
They overlap conceptually
It‚Äôs hard to understand one of the pieces of code without looking at the other.
We should:</p>
<p>Bring together if information is shared.
Bring together if it will simplify the interface.
Bring together to eliminate duplication.
Separate general-purpose and special-purpose code. Failing to do so is usually a red flag.
In Vue 3, there‚Äôs this concept of composition API that we can use to easily use other Vue primitives that we already know and love such as computed properties, refs and reactives, watchers and lifecycle hooks in one place and use it everywhere we like.</p>
<p>useTodos.ts composable gathering all logic in one place
What we did here is that we gathered the logic and state spreading through 3 different components in one single file. we can import this file and use what it returns like any other module and even if requirements change in the future, we only need to change one file!</p>
<p>Pull Complexity Downwards</p>
<p>It‚Äôs more important for a module to have a simple interface than a simple implementation (as also said above).</p>
<p>We should try to do complicated tasks in the inner layers and do more general things in the outer layers. This reduces cognitive load for others because we are creating modules with more functionality and simpler interfaces which is the textbook definition of ‚Äúdeeper modules‚Äù.</p>
<p>Define Errors Out Of Existence
The exceptions thrown by a class are part of its interface. Classes with lots of exceptions have complex interfaces, and they are shallower than classes with fewer exceptions.</p>
<p>Exception handling is one of the worse sources of complexity in software systems.</p>
<p>Exception handling code is inherently more difficult to write than normal-case code. Furthermore, it creates opportunities for more exceptions.
It‚Äôs difficult to ensure that exception handling code really works. Some exceptions can‚Äôt easily be generated in a test environment.
Code that hasn‚Äôt been executed doesn‚Äôt work.</p>
<p>The best way to eliminate exception handling complexity is to define your APIs so that there are no exceptions to handle.</p>
<p>Exception masking
Reduce the number of places where exceptions must be handled.</p>
<p>Exception aggregation
Handle many exceptions with a single piece of code. Exception aggregation works best if an exception propagates several levels up the stack before it is handled. This allows more exceptions from more methods to be handled in the same place.</p>
<p>This is the opposite of exception masking, masking usually works best if an exception is handled in a low-level method. For masking, the low-level method is typically a library method used by many other methods, so allowing the exception to propagate would increase the number of places where it is handled.</p>
<p>Masking and aggregation are similar in that both approaches position an exception handler where it can catch the most exceptions, eliminating many handlers that would otherwise need to be created.</p>
<p>Just crash when it makes sense to do so. By the same token, it also makes sense to define other special cases out of existence.</p>
<p>Design it Twice
Designing software is hard, so it‚Äôs unlikely that your first thoughts about how to structure a module or system will produce the best design. You‚Äôll end up with a much better result if you consider multiple options for each major design decision.</p>
<p>Writing better comments
There are a lot of excuses for not commenting in any code base such as:</p>
<p>Good code is self-documenting.
I don‚Äôt have time to write comments.
Comments get out of date and become misleading.
The comments I have seen are all worthless. Why bother?
All of these excuses are debunked in the book.</p>
<p>Good documentation helps with two of three ways in which complexity manifests itself in software systems = cognitive load and unknown unknowns.</p>
<p>Comments should decrease obscurity
Consider the following points:</p>
<p>Decide on conventions for commenting.
Don‚Äôt repeat the code. Comments at the same level of details as the code is not useful and a red flag. Ask yourself a question ‚Äúcould someone who has never seen the code write the comment just by looking at the code next to the comment?‚Äù. If the answer is yes, the comment is not useful.
Comments augment the code by providing information at a different level of detail, low-level comments add precision, high-level comments offer intuition.
If interface comments must also describe the implementation, then the class/method is shallow.
Delayed comments are bad comments, write the comments first.
Comments are a design tool. Comments serve as a canary in the coal mine of complexity. If a method or variable requires a long comment, it is a red flag that you don‚Äôt have a good abstraction.
Early comments are fun comments, Early comments are not really too expensive.
Choosing Names
Good names are a form of documentation/abstraction. Good names have two properties, precision and consistency.</p>
<p>Consistency
Always use the common name for the given purpose. Never use the common name for anything other than the given purpose. Make sure that the purpose is narrow enough that all variables with the name have the same behavior.</p>
<p>The greater the distance between a name‚Äôs declaration and its uses, the longer the name should be.</p>
<p>Precision
Vague names are a red flag. It‚Äôs fine to use generic names like i and j in a loop. But if the loop gets so long that you can&rsquo;t see it all at once, then a more descriptive name is in order. Also avoid names that are too specific. - If you find it difficult to come up with a name for a particular variable that is precise, intuitive, and not too long, it suggests that the variable may not have a clear definition or purpose.</p>
<p>Consistency
Consistency creates cognitive leverage, once you have learned how something is done in one place, you can use that knowledge to immediately understand other places that use the same approach. Examples include names, coding style, interfaces, design pattern, and invariants.</p>
<p>Document the most important overall conventions. Enforce conventions with automated tools (like ESLint) to check for violations.</p>
<p>Don‚Äôt change existing conventions. Having a ‚Äúbetter idea‚Äù is not a sufficient excuse to introduce inconsistencies. The value of consistency over inconsistency is almost always greater than the value of one approach over another.</p>
<p>Like the saying goes:</p>
<p>When in Rome, do as the Romans do.</p>
<p>Code Should Be Obvious
Software should be designed for ease of reading, not ease of writing.</p>
<p>Things that make code more obvious:</p>
<p>Choosing good names (as mentioned above)
Consistency (as mentioned above)
General-purpose techniques such as white space or comments.
Things that make code less obvious:</p>
<p>Event-driven programming
Generic containers
Different types for declaration and allocation
Code that violates reader expectations
One of the bad practices in Vue is handling business logic and state mutation in watchers. Watchers or watchEffect should be implemented in a ‚Äúfire and forget‚Äù manner. Also using provide and inject can potentially be not obvious. use these tools wisely.</p>
<p>We‚Äôve covered key concepts discussed in the book. now as a bonus let‚Äôs see how SOLID principles relate to our readings above!</p>
<p>SOLID Vue</p>
<ol>
<li>S for ‚ÄúSingle-responsibility principle‚Äù
The idea behind the SRP is that every class, component, module or function in a program should only have one responsibility. As a commonly used definition we can say = ‚Äúevery component should have only one reason to change‚Äù.</li>
</ol>
<p>Your components need to do one thing and if you want multiple thing happens you should compose them so that a reader understands ‚Äúoh this a component that gathers 3 other components that only do one thing, so it should only be able to do 3 things!‚Äù</p>
<p>Be cautious if you have a component that imperatively does a lot of different things at once.</p>
<p>A great example of SRP is tailwind CSS, A utility-first CSS framework packed with classes like flex, pt-4, text-center and rotate-90 that can be composed to build any design, directly in your markup.</p>
<p>Great thing about tailwind that everyone loves is that it is consistent and composable so you can throw as many classes to a div as you‚Äôd like and be sure that the end result will be a combination of the classes and non of these classes are implicitly overriding each other‚Äôs styles.</p>
<ol start="2">
<li>O for ‚ÄúOpen‚Äìclosed principle‚Äù
The open-closed principle states that software entities should be open for extension, but closed for modification.</li>
</ol>
<p>Slots are great examples of how we can Facilitate extensions in Vue. Slots will help us extend our components with any template we want and in the same time keeping our state inside!</p>
<p>In computer programming, as soon as you introduce a ‚Äústate‚Äù you are responsible for its existence and side effects. Always ask yourself ‚Äúwhat changes my states?‚Äù. Always have a ‚Äústate machine‚Äù in your mind that handles every expected behavior or unexpected errors. This is how we can make sure we are closed for modification.</p>
<ol start="3">
<li>L for ‚ÄúLiskov substitution principle‚Äù
Personally I don‚Äôt think we get to see a lot of LSP in the Vue ecosystem because I assume there aren‚Äôt a lot of companies or teams that are using class components, but anyways, here‚Äôs the description!</li>
</ol>
<p>The ‚ÄúLiskov substitution principle‚Äù simply implies that when an instance of a class/component is passed or extended to another class/component, the inheriting class should have a use case for all the properties and behavior of the inherited class.</p>
<ol start="4">
<li>I for ‚ÄúInterface segregation principle‚Äù
The interface segregation principle states that the interface of a program should be split in a way that the user/client would only have access to the necessary methods related to their needs.</li>
</ol>
<p>This is kind of related to the first principle (SRP) and this is closely related to deep modules concept discussed at in first sections of this article. It is important when designing prop interfaces and how components interact with each other.</p>
<ol start="5">
<li>D for ‚ÄúDependency inversion‚Äù
High-level modules should not import anything from low-level modules. Both should depend on abstractions.</li>
</ol>
<p>Let me show you an example in Vue = loose coupling between backend APIs and component props.</p>
<p>Never let your backend API properties define your components‚Äô props, instead conclude an interface that satisfies both APIs, UI and application requirements simultaneously, then use a map function to transform the API data so that in complies to the interface.</p>
<p>This way if API or requirements change, you only alter the mapping implementation and all the component tree will be untouched!</p>
<p>This method of thinking is inconvenient and takes more time to develop at first but this is an investment for future changes.</p>
<p>At last we should consider not obsessing about all the rules said above. There are technical debts to overcome deadlines etc. but we should strive for fundamentals and learning them because we will subconsciously be better programmers in the end.</p>
]]></content:encoded>
    </item>
    <item>
      <title>making a vscode extension using vue ecosystem</title>
      <link>http://localhost:3000/blog/making-a-vscode-extension-using-vue-ecosystem/</link>
      <pubDate>Sun, 12 Dec 2021 01:47:16 +0330</pubDate><author>mhdi_kr@outlook.com (Mahdi Karimi)</author>
      <guid>http://localhost:3000/blog/making-a-vscode-extension-using-vue-ecosystem/</guid>
      <description>Using vue 3, vite and TypeScript, we try to make a vscode extension</description>
      <content:encoded><![CDATA[<p>TLDR; <a href="https://github.com/Mhdi-kr/vscode-webvue">see the extension template repo</a></p>
<h2 id="our-first-hello-world-extension">Our First ‚ÄúHello World‚Äù Extension</h2>
<p>Let‚Äôs start with a simple extension that shows a message toast in the bottom right, shall we?</p>
<p>According to the VS Code official instructions, we first need to install the following two packages.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ npm install -g yo generator-code</span></span></code></pre></div><p>then, We need to run this command to scaffold our basic extension.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">yo code</span></span></code></pre></div><p>After completing required steps in the CLI, we have a base extension that we can tinker with.</p>
<p>In the <code>extension.ts</code> file generated we can see two callback functions:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-typescript" data-lang="typescript"><span class="line"><span class="ln">1</span><span class="cl"><span class="kd">function</span> <span class="nx">activate() {</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">    <span class="p">...</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="kd">function</span> <span class="nx">deactivate() {</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">    <span class="p">...</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>These functions are called in our extension‚Äôs lifecycle when starting and stopping.</p>
<p>To test and run our extension go ahead and press F5 on the keyboard (assuming you&rsquo;re using vscode, if you&rsquo;re not using vscode, why are u even reading this post? xD). This will open up a new VS Code instance called the ‚ÄúDevelopment host‚Äù that has our extension loaded up locally.</p>
<p>In the <code>extension.ts</code> file we can see a key with which our extension is registered in the <em>Command palette</em>. That key also has to be registered in the <code>package.json</code> file in our extension root directory with a title.</p>
<p>In the extension host, open up <em>Command palette</em> and type in the registered title to activate our extension.</p>





<pre tabindex="0"><code>command pallette shows:

&gt; Hello world</code></pre><p>press <code>enter</code> and now we should be able to see that information message we‚Äôre looking for!</p>
<p>now if we want to make any changes we just have to go back to our source code, apply our wanted changes and press f5 again to re-run the extension host!</p>
<h2 id="creating-a-webview">creating a WebView</h2>
<p>VS Code is an Electron based application so it is technically like a browser that can render HTML or CSS and has the ability to run your own JavaScript.</p>
<p>To programmatically render all of your web files we need to make the following happen:</p>
<p>We add a function that returns a panel, for that panel we can set a html property which will be eventually rendered as a WebView in VS Code!</p>
<p>now by pressing f5 again we should call our new command in the Command palette using:</p>





<pre tabindex="0"><code>command pallette should show:

&gt; Show Panel</code></pre><p>and yeah this works! our html is now loaded and rendered like a browser INSIDE VS Code.</p>
<p>Ok, then now that we are able to import 3rd party CSS and JavaScript, all there‚Äôs to do is to have a Vuejs project built and then imported over to the VS Code extension context.</p>
<h2 id="too-much-work-theres-a-template-to-this-for-you">Too much work? There&rsquo;s a template to this for you</h2>
<p><a href="https://github.com/Mhdi-kr/vscode-webvue">Enter VS Code WebVue</a></p>
<p>In the template we have two packages, our extension package and our Vue package.</p>
<p>In the vue package we have simple counter app we can open it up in the browser like all the other vue apps by running it in the development server</p>
<p>After making changes to in the vue package, Nodemon scans for file changes and build our vue app to files with specific names, then those files are imported using VS Code file resolution API and injected into our HTML template string.</p>
<p>The Nodemon also opens up an instance of VSCODE so we don&rsquo;t need to refresh manually. it also watches the extension‚Äôs source code as well restarting it if any changes are made, so this incredibly increases the ease of our DX.</p>
<p>Now lets run to see our vue extension in action!</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">yarn watch</span></span></code></pre></div><p>An instance of development host opens up containing our web files and registered command!</p>





<pre tabindex="0"><code>in the command pallette:

&gt; Hello world</code></pre><p>Here you can see your vue project already built and injected using VSCode WebView API. you can utilize the full functionality of Vue js such as its amazing reactivity and its available plugins out of the box!</p>
<p>when you start developing on the /packages/client/ vue application directory, your changes will be watched using Nodemon, then rebuilt and be opened inside VS Code extension host ready to be used with VS Code Command palette!</p>
<p>Inside the vue application code, the vscode object is globally injected and can be used to send messages to the VS Code runtime and perform tasks such as read/writing files, etc.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
